#!/bin/python

# This program builds a ctags file that can be used to
# navigate disassembled code.  The idea is to build a
# tags file with all the addresses in the code.
# Then you can click on an address and go there.
# It works well and is something I started using with
# the Sun3/80 disassembly

import re

infile = "demo.txt"

outfile = "tags"

num = 1

of = open ( outfile, "w")

# Use line numbers
def process_OLD ( line, num, prefix ) :
    tag = re.sub ( r":.*", "", line )
    xtag = prefix + tag
    cmd = [ xtag, infile, str(num) ]
    of.write ( "\t".join(cmd) + "\n" )

# Use pattern
# We match 80xxxxx, but search for ' 80xxxxx'
def process ( line, num, prefix ) :
    otag = re.sub ( r":.*", "", line )
    #tag = re.sub ( r"^0", "", otag )
    #tag = re.sub ( r"^ ", "", otag )
    tag = otag
    xtag = prefix + tag
    srch = "/^ " + otag + "/"
    cmd = [ xtag, infile, srch ]
    of.write ( "\t".join(cmd) + "\n" )

#pattern = r"^fef.....:"
#pattern = r"^080.....:"
pattern = r"^80.....:"

# Note that strip removes white space at the start
# of lines, as well as the newline at the end.

# spit out tags with 0x prefix.
# vim likes these first so tags are "sorted"
with open ( infile ) as f:
    for raw in f:
        line = raw.strip()
        if re.search(pattern, line):
            process ( line, num, "0x" )
        num += 1

# spit out tags without 0x prefix.
# Not as common as the above, but handy also
with open ( infile ) as f:
    for raw in f:
        line = raw.strip()
        if re.search(pattern, line):
            process ( line, num, "" )
        num += 1

# THE END
